{
  "name": "galileo-io",
  "description": "Galileo IO",
  "version": "0.0.16",
  "homepage": "https://github.com/rwaldron/galileo-io",
  "author": {
    "name": "Rick Waldron",
    "email": "waldron.rick@gmail.com"
  },
  "contributors": [],
  "keywords": [
    "galileo",
    "io",
    "arduino",
    "intel",
    "firmata",
    "johnny-five"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/rwaldron/galileo-io.git"
  },
  "bugs": {
    "url": "https://github.com/rwaldron/galileo-io/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rwaldron/galileo-io/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/galileo",
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "es6-shim": "~0.9.2",
    "nanotimer": "0.3.0",
    "remapped": "~0.2.1",
    "es6-promise": "~0.1.1",
    "graceful-fs": "~2.0.2"
  },
  "devDependencies": {
    "rewire": "~2.0.0",
    "sinon": "~1.7.3",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-jsbeautifier": "~0.2.2"
  },
  "scripts": {
    "test": "grunt"
  },
  "js-flags": "--harmony",
  "readme": "# Galileo-io\n\n[![Build Status](https://travis-ci.org/rwaldron/galileo-io.png?branch=master)](https://travis-ci.org/rwaldron/galileo-io)\n\nGalileo-io is a Firmata-compatibility IO class for writing node programs that run on and interact with the [Intel Galileo](https://www-ssl.intel.com/content/www/us/en/do-it-yourself/galileo-maker-quark-board.html).\n\n### Getting Started\n\nSee Intel Galileo setup. Galileo-io scripts are run _on_ the Galileo board itself, via its \"full Linux\" installation.\n\n### Installation\n\n```\nnpm install galileo-io\n```\n\n### Usage\n\nThis module can be used an IO plugin for [Johnny-Five](https://github.com/rwaldron/johnny-five).\n\n### Blink an Led\n\nThe \"Hello World\" of microcontroller programming:\n\n```js\nvar Galileo = require(\"galileo-io\");\nvar board = new Galileo();\n\nboard.on(\"ready\", function() {\n  var byte = 0;\n  this.pinMode(9, this.MODES.OUTPUT);\n\n  setInterval(function() {\n    board.digitalWrite(9, (byte ^= 1));\n  }, 500);\n});\n```\n\n### Johnny-Five IO Plugin\n\nGalileo-IO is the default [IO layer](https://github.com/rwaldron/johnny-five/wiki/IO-Plugins) for [Johnny-Five](https://github.com/rwaldron/johnny-five) programs that are run on an Intel Galileo board.\n\n\n### API\n\n**digitalWrite(pin, 1|0)**\n\n> Sets the pin to 1 or 0, which either connects it to 5V (the maximum voltage of the system) or to GND (ground).\n\nExample:\n```js\n// This will turn on the pin\nboard.digitalWrite(9, 1);\n```\n\n\n\n**analogWrite(pin, value)**\n\n> Sets the pin to a value between 0 and 255, where 0 is the same as LOW and 255 is the same as HIGH. This is sort of like sending a voltage between 0 and 5V, but since this is a digital system, it uses a mechanism called Pulse Width Modulation, or PWM. You could use analogWrite to dim an LED, as an example.\n\nExample:\n```js\n// Crank an LED to full brightness\nboard.analogWrite(9, 255);\n```\n\n**servoWrite(pin, value)** This is an alias to `analogWrite`\n\n\n**digitalRead(pin, handler)** Setup a continuous read handler for specific digital pin.\n\n> This will read the digital value of a pin, which can be read as either HIGH or LOW. If you were to connect the pin to 5V, it would read HIGH (1); if you connect it to GND, it would read LOW (0). Anywhere in between, it’ll probably read whichever one it’s closer to, but it gets dicey in the middle.\n\nExample:\n```js\n// Log all the readings for 9\nboard.digitalRead(9, function(data) {\n  console.log(data);\n});\n```\n\n\n**analogRead(pin, handler)** Setup a continuous read handler for specific analog pin.\n\n> This will read the analog value of a pin, which is a value from 0 to 4095, where 0 is LOW (GND) and 4095 is HIGH (5V). All of the analog pins (A0 to A5) can handle this. analogRead is great for reading data from sensors.\n\n\nExample:\n```js\n// Log all the readings for A1\nboard.analogRead(\"A1\", function(data) {\n  console.log(data);\n});\n\n```\n\n## License\nSee LICENSE file.\n\n",
  "readmeFilename": "readme.md",
  "_id": "galileo-io@0.0.16",
  "_from": "galileo-io@latest"
}
