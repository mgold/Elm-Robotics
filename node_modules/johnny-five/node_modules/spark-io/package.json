{
  "name": "spark-io",
  "description": "Spark Core IO",
  "version": "0.2.0",
  "homepage": "https://github.com/rwaldron/spark-io",
  "author": {
    "name": "Rick Waldron",
    "email": "waldron.rick@gmail.com"
  },
  "contributors": [
    {
      "name": "Chris Williams",
      "email": "<chris@iterativedesigns.com"
    }
  ],
  "keywords": [
    "spark",
    "io",
    "arduino",
    "firmata",
    "johnny-five"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/rwaldron/spark-io.git"
  },
  "bugs": {
    "url": "https://github.com/rwaldron/spark-io/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rwaldron/spark-io/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/spark",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "es6-shim": "~0.9.2",
    "nanotimer": "0.3.0",
    "restler": "~3.1.0"
  },
  "devDependencies": {
    "sinon": "~1.7.3",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-jsbeautifier": "~0.2.2"
  },
  "scripts": {
    "test": "grunt"
  },
  "js-flags": "--harmony",
  "readme": "# Spark-io\n\n[![Build Status](https://travis-ci.org/rwaldron/spark-io.png?branch=master)](https://travis-ci.org/rwaldron/spark-io)\n\nSpark-io is a Firmata-compatibility IO class for writing node programs that interact with [Spark devices](http://docs.spark.io/).\n\n### Getting Started\n\nIn order to use the spark-io library, you will need to load the special\n[voodoospark](https://github.com/voodootikigod/voodoospark) firmware onto your\ndevice. We recommend you review the [Getting Started](https://github.com/voodootikigod/voodoospark#getting-started)\nover there before continuing further.\n\n### Blink an Led\n\nThe \"Hello World\" of microcontroller programming:\n\n```js\nvar Spark = require(\"spark-io\");\nvar board = new Spark({\n  token: \"{{yours}}\",\n  deviceId: \"{{yours}}\"\n});\n\nboard.on(\"ready\", function(data) {\n  console.log(\"CONNECTED\", data);\n\n  var byte = 0;\n\n  setInterval(function() {\n    console.log(\"message\");\n    this.digitalWrite(\"D7\", (byte ^= 1));\n  }.bind(this), 500);\n});\n```\n\n### Johnny-Five IO Plugin\n\nSpark-IO can be used as an [IO Plugin](https://github.com/rwaldron/johnny-five/wiki/IO-Plugins) for [Johnny-Five](https://github.com/rwaldron/johnny-five):\n\n```js\nvar five = require(\"johnny-five\");\nvar Spark = require(\"spark-io\");\nvar board = new five.Board({\n  io: new Spark({\n    token: \"{{yours}}\",\n    deviceId: \"{{yours}}\"\n  })\n});\n\nboard.on(\"ready\", function() {\n  var led = new five.Led(\"D7\");\n  led.blink();\n});\n```\n\n\n### API\n\nThis is copied directly from [The Tinker API](http://docs.spark.io/#/start/tinkering-with-tinker-the-tinker-api).\n\n\n**digitalWrite(pin, value)**\n\n> Sets the pin to 1 or 0, which either connects it to 3.3V (the maximum voltage of the system) or to GND (ground). Pin D7 is connected to an on-board LED; if you set pin D7 to HIGH, the LED will turn on, and if you set it to LOW, it will turn off.\n\n> The parameters must be the pin (A0 to A7, D0 to D7), followed by either HIGH or LOW, separated by a comma. The return value will be 1 if the write succeeds, and -1 if it fails.\n\n> [Tinker API: digitalWrite](http://docs.spark.io/#/start/the-tinker-api-digitalwrite)\n\nExample:\n```js\n// This will turn on the on-board LED\nboard.digitalWrite(\"D7\", 1);\n```\n\n\n\n**analogWrite(pin, value)**\n\n> Sets the pin to a value between 0 and 255, where 0 is the same as LOW and 255 is the same as HIGH. This is sort of like sending a voltage between 0 and 3.3V, but since this is a digital system, it uses a mechanism called Pulse Width Modulation, or PWM. You could use analogWrite to dim an LED, as an example.\n\n> The parameters must be the pin (A0 to A7, D0 to D7), followed by an integer value from 0 to 255, separated by a comma. The return value will be 1 if the write succeeds, and -1 if it fails.\n\n> [Tinker API: analogWrite](http://docs.spark.io/#/start/the-tinker-api-analogwrite)\n\nExample:\n```js\n// Crank an LED to full brightness\nboard.analogWrite(\"A7\", 255);\n```\n\n**servoWrite(pin, value)** This is an alias to `analogWrite`\n\n\n**digitalRead(pin, handler)** Setup a continuous read handler for specific digital pin.\n\n> This will read the digital value of a pin, which can be read as either HIGH or LOW. If you were to connect the pin to 3.3V, it would read HIGH; if you connect it to GND, it would read LOW. Anywhere in between, it’ll probably read whichever one it’s closer to, but it gets dicey in the middle.\n\n> The parameters must be the pin (A0 to A7, D0 to D7). The return value will be between 0 and 4095 if the read succeeds, and -1 if it fails.\n\n> [Tinker API: digitalRead](http://docs.spark.io/#/start/the-tinker-api-digitalread)\n\nExample:\n```js\n// Log all the readings for D1\nboard.digitalRead(\"D1\", function(data) {\n  console.log(data);\n});\n```\n\n\n**analogRead(pin, handler)** Setup a continuous read handler for specific analog pin.\n\n> This will read the analog value of a pin, which is a value from 0 to 4095, where 0 is LOW (GND) and 4095 is HIGH (3.3V). All of the analog pins (A0 to A7) can handle this. analogRead is great for reading data from sensors.\n\n> The parameters must be the pin (A0 to A7, D0 to D7). The return value will be between 0 and 4095 if the read succeeds, and -1 if it fails.\n\n> [Tinker API: analogRead](http://docs.spark.io/#/start/the-tinker-api-analogread)\n\nExample:\n```js\n// Log all the readings for A1\nboard.analogRead(\"A1\", function(data) {\n  console.log(data);\n});\n\n```\n\n## License\nSee LICENSE file.\n",
  "readmeFilename": "readme.md",
  "_id": "spark-io@0.2.0",
  "dist": {
    "shasum": "2466f8333d8f710168a2ea4d83530edf14c34ef4"
  },
  "_from": "spark-io@latest",
  "_resolved": "https://registry.npmjs.org/spark-io/-/spark-io-0.2.0.tgz"
}
