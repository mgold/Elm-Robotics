{
  "name": "browser-serialport",
  "version": "0.0.4",
  "description": "Robots in the browser. Just like node-serialport but for browser/chrome apps.",
  "main": "index.js",
  "browser": "./index.js",
  "dependencies": {},
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/garrows/browser-serialport"
  },
  "keywords": [
    "serial",
    "firmata",
    "nodebots",
    "chromebots",
    "browserbots",
    "robot",
    "robots"
  ],
  "author": {
    "name": "Glen Arrowsmith @garrows"
  },
  "bugs": {
    "url": "https://github.com/garrows/browser-serialport/issues"
  },
  "readme": "\n# browser-serialport\n\nRobots in the browser. Just like [node-serialport](https://npmjs.org/package/serialport) but for browser apps. \n\n\n## Why not Node.js?\n\n[Nodebots](http://nodebots.io/) are awesome but HTML5 apps have access to a lot of APIs that make sense for robotics like the [GamepadAPI](http://www.html5rocks.com/en/tutorials/doodles/gamepad/), [WebRTC Video and Data](http://www.webrtc.org/), [Web Speech API](http://www.google.com/intl/en/chrome/demos/speech.html), etc. Also you get a nice GUI and its easier to run. I have also made a fork of [Johnny-Five](https://github.com/garrows/johnny-five) to work with [Browserify](http://browserify.org/) as well by modifying it's dependancy [Firmata](https://github.com/garrows/firmata) to use browser-serialport. \n\n\n## Demos\n\nA [Serial Monitor](https://chrome.google.com/webstore/detail/serial-monitor/ohncdkkhephpakbbecnkclhjkmbjnmlo) (like the one in the Arduino IDE) is available in the chrome web store. Source is available in the demo directory.\n\nI made a [Johnny Five Demo](https://chrome.google.com/webstore/detail/johnny-five-demo/ikbnclceoeficmoaocnoggdaiacmalfo) that uses browser-serialport too. More features coming to that soon though.  \n\n\n## Restrictions\n\nYou will not be able to add this to your normal website. \n\nThis library only works in a [Chrome Packaged App](http://developer.chrome.com/apps/about_apps.html) as this is the only way to get access to the [serial ports API](http://developer.chrome.com/apps/serial.html) in the browser.\n\nIf you want help making your first Chrome App, read the getting [\"Create Your First App\"](http://developer.chrome.com/apps/first_app.html) tutorial.\n\nThere is currently no Firefox extension support but that might come soon if possible.\n\n## Installation\n\n```\nnpm install browser-serialport\n```\n\n## Usage\n\nThe library tries to emulate the node-serialport library with some minor differences. If you find some breaking inconsistencies, please submit an issue. I've tested using [Browserify](http://browserify.org/) for browser module loading. Please let me know if it doesn't work for others.\n\n```js\n\nvar SerialPort = require(\"browser-browser-serialport\").SerialPort;\nvar sp = new SerialPort(port, {\n    baudrate: 9600,\n    buffersize: 1\n}, true);\n\n\nsp.on(\"open\", function() {\n\tconsole.log(\"Connection is ready.\");\n\t//Send a string\n\tsp.writeString(\"Hello robot\\n\");\n\t//You can also send buffers\n\tvar buf = new Buffer(\"Buffers are handy\", \"utf8\");\n\tsp.write(buf);\n});\n\nsp.on(\"error\", function(err) {\n\tconsole.log(\"Error\", err);\n});\n\n//You can listen for data as a buffer.\nsp.on(\"data\", function(buf) {\n\tconsole.log(\"Data\", buf);\n});\t\n\n//Or string encoding can be done for you\nsp.on(\"dataString\", function(string) {\n\tconsole.log(\"String\", string);\n});\t\n\n\n```\n\nYou can also list the available serialports.\n\n```js\n\t\nvar SerialPortLib = require(\"browser-serialport\");\n\nSerialPortLib.list(function(error, portsArray) {\n\tif (!error) {\n\t\tconsole.log(\"Ports available\", portsArray);\n\t}\n});\n\n```\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/garrows/browser-serialport",
  "_id": "browser-serialport@0.0.4",
  "_from": "browser-serialport@*"
}
